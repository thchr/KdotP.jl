"""
    kdotp(lgir::LGIrrep, Œ±Œ≤Œ≥=nothing; timereversal::Bool=true) --> KPHamiltonian

Return a basis for the allowed **k**‚ãÖ**p** Hamiltonians of a small irrep `lgir` up to linear
order in momentum.

## Arguments
- `lgir`: a small irrep of a little group, provided as an instance of the type `LGIrrep`.
  Tables of `LGIrrep`s are accessible from the `lgirreps` function of Crystalline.jl
  package.
- `Œ±Œ≤Œ≥`: if the little group associated with `lgir` has free parameters, i.e., if the
  **k**-point is parametrized by free parameters (Œ±, Œ≤, Œ≥), these parameters may be set
  via `Œ±Œ≤Œ≥ = [Œ±, Œ≤, Œ≥]`. If `Œ±Œ≤Œ≥ = nothing` (default), `lgir` is implicitly evaluated at
  `Œ±Œ≤Œ≥ = [0, 0, 0]`.
- `timereversal` (keyword argument): if `true` (default), time-reversal invariance is
  imposed on the **k**‚ãÖ**p** expansion. If `lgir` is a corepresentation (i.e., a "glued-up"
  irrep), `timereversal` must be set to `true`; conversely, if `lgir` is a pseudoreal or
  complex irrep that would otherwise pair up under time-reversal, `timereversal` must be
  set to `false`.

## Output
- `H`: a [`KPHamiltonian`](@ref), containing the allowable terms of a **k**‚ãÖ**p** expansion
  consistent with the transformation properties implied by `lgir`. Specifically, the allowed
  Hamiltonian is expanded in the following manner:
  
  `H`
  includes the basis elements ``H_a(\\mathbf{k})`` of the the allowed Hamiltonian
  
  ```math
  H(\\mathbf{k}) = \\sum_a q_a H_a(\\mathbf{k})
  ```

  where ``q_a`` are free coefficients and ``H_a(\\mathbf{k})``are the basis elements of the
  allowable (linear-order) **k**‚ãÖ**p** Hamiltonian terms.
  To evaluate `H` for a specific set of expansion vectors at a particular **k**-point
  (measured relative to the **k**-point in `lgir`, and assumed referred to the basis system
  assumed in `lgir`; i.e., generally relative to a reciprocal lattice basis) and for a
  particular set of expansion coefficients `qs` ``= [q_1, q_2, \\ldots, q_N]``, `H` can be
  called as a functor using the syntax `H(k, qs)`.

"""
function kdotp(lgir::LGIrrep{D}, Œ±Œ≤Œ≥=nothing; timereversal::Bool=true) where D
    lg = group(lgir) # TODO: maybe e.g., skip identity?
    hs = Hermitian.(gellmann(Crystalline.irdim(lgir); skip_identity=false, norm_identity=true))
    N = length(hs)
    G = length(lg)

    Œìs = lgir(Œ±Œ≤Œ≥)
    
    # assembling matrices
    # TODO: there is some minimal necessary set of operators to include here; possibly just
    #       the generators?
    A = zeros(Float64, N*D*G, N*D)
    for g in eachindex(lg)
        Œì  = Œìs[g]
        Œì‚Åª¬π = inv(Œì)
        for m in 1:N
            for n in 1:N
                tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π = tr(hs[m]'*Œì*hs[n]*Œì‚Åª¬π)
                if abs(imag(tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π)) > ATOL_DEFAULT
                    error("element of real matrix had non-negligible imaginary part $tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π")
                end
                tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π_re = real(tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π)
                abs(tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π_re) > ATOL_DEFAULT || continue
                for i in 1:D # Œ¥‚±º·µ¢
                    A[(g-1)*(N*D) + (i-1)*N + m, (i-1)*N + n] = tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π_re
                end
            end
        end
    end

    Œ≥2 = zeros(Float64, N*D*G, N*D)
    for (g, op) in enumerate(lg)
        R = rotation(op) # apparently, there should _not_ be a transpose here¬π‚Åæ
        # ¬π‚Åæ g is imagined as acting on a parameter "k", rather than a "k-vector" per se
        for i in 1:D
            for j in 1:D
                R‚±º·µ¢ = R[j,i]
                iszero(R‚±º·µ¢) && continue
                for m in 1:N # Œ¥‚Çô‚Çò
                    Œ≥2[(g-1)*(N*D) + (i-1)*N + m, (j-1)*N + m] = 2R‚±º·µ¢
                end
            end
        end
    end

    if Crystalline.iscorep(lgir) && !timereversal
        error("provided irrep is a corep (i.e., is modified by and assumes time-reversal symmetry), but the timereversal keyword is set to `false`.")
    end

    # if assumed present, check if time-reversal has an impact
    if timereversal # TODO: also check if already a corep; if so, TR _must_ be assumed
        g‚ÇÄ = kv_to_negative_kv_operation(lgir)
        if !isnothing(g‚ÇÄ)
            # Find a representation of ùíØg‚ÇÄ [Œì(ùíØg‚ÇÄ)K, with K denoting complex conjugation]
            # and then apply the constraint
            #                    Œì(ùíØg‚ÇÄ)H(k)Œì(ùíØg‚ÇÄ)‚Åª¬π = H*(‚àíg‚ÇÄk)
            ŒìùíØg‚ÇÄ = find_antiunitary_irrep(lgir, g‚ÇÄ)
            ŒìùíØg‚ÇÄ‚Åª¬π = inv(ŒìùíØg‚ÇÄ) # TODO: could just be ŒìùíØg‚ÇÄ‚Ä†, right?

            AùíØ = zeros(Float64, N*D, N*D)
            for m in 1:N
                for n in 1:N
                    tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π = tr(hs[m]'*ŒìùíØg‚ÇÄ*hs[n]*ŒìùíØg‚ÇÄ‚Åª¬π)
                    if abs(imag(tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π)) > ATOL_DEFAULT
                        error("element of real matrix had non-negligible imaginary part $tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π")
                    end
                    tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π_re = real(tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π)
                    abs(tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π_re) > ATOL_DEFAULT || continue
                    for i in 1:D # Œ¥‚±º·µ¢
                        AùíØ[(i-1)*N + m, (i-1)*N + n] = tr_h‚ÇòŒìh‚ÇôŒì‚Åª¬π_re
                    end
                end
            end

            Œ≥2ùíØ = zeros(Float64, N*D, N*D)
            R‚ÇÄ = rotation(g‚ÇÄ) # see ¬π‚Åæ regarding transposition/no transposition
            conj_prefs = [real(tr(h'*conj(h))) for h in hs] # ‚ü®h‚Çò|h‚Çò*‚ü©_F = ¬±2
            for i in 1:D
                for j in 1:D
                    R‚ÇÄ‚±º·µ¢ = R‚ÇÄ[j,i]
                    iszero(R‚ÇÄ‚±º·µ¢) && continue
                    for m in 1:N # Œ¥‚Çô‚Çò
                        Œ≥2ùíØ[(i-1)*N + m, (j-1)*N + m] = -conj_prefs[m]*R‚ÇÄ‚±º·µ¢
                    end
                end
            end
            A  = vcat(A, AùíØ)   # TODO: do this without allocating twice?
            Œ≥2 = vcat(Œ≥2, Œ≥2ùíØ)
        end
    end

    # solving nullspace (c = [c_11, ‚Ä¶, c_N1, c_12, ‚Ä¶, cN2, ‚Ä¶, c_1D, ‚Ä¶, c_ND] = c‚Çô·µà)
    _cs = nullspace(A - Œ≥2, atol=ATOL_DEFAULT)
    cs = sparsify_columns(_cs, atol=ATOL_DEFAULT)

    # drop very small parts
    map!(x->abs(x) > ATOL_DEFAULT ? x : 0.0, cs, cs)

    # split coefficients into meaningful structure
    cs‚Ä≤ = [ntuple(d->cs[(d-1)*N+1:d*N,a], Val(D)) for a in 1:size(cs, 2)]

    # remove/prune coefficients/matrices that do not appear in the allowed expansions
    redundant_hs = Int[]
    for n in 1:N
        redundant = true
        for c‚Çê in cs‚Ä≤
            for c‚Çê·µà in c‚Çê
                !iszero(c‚Çê·µà[n]) && (redundant=false; break)
            end
            redundant || break
        end
        redundant && push!(redundant_hs, n)
    end
    deleteat!(hs, redundant_hs)
    for c‚Çê in cs‚Ä≤
        for c‚Çê·µà in c‚Çê
            deleteat!(c‚Çê·µà, redundant_hs)
        end
    end

    # normalize coefficients for pretty-printing
    for c‚Çê in cs‚Ä≤
        scale = zero(Float64)
        for c‚Çê·µà in c‚Çê
            v, idx = findmax(abs, c‚Çê·µà)
            scale = abs(scale) < v ? c‚Çê·µà[idx] : scale
        end
        for c‚Çê·µà in c‚Çê
            c‚Çê·µà ./= scale
        end
    end

    return KPHamiltonian{D}(lgir, hs, cs‚Ä≤)
end

# matrix sparsification (adapted from https://math.stackexchange.com/a/4227787)
function sparsify_columns(A; atol=ATOL_DEFAULT)
    n = size(A,2) 
    if n ‚â§ 1
        return A
    else
        # by assumption, the n columns of A are linearly independent
        rank(A) ‚â† n && error("columns of A must be independent")

        # row rank == column rank: so, we can find n linearly independent rows in A
        indep_rows = Vector{eltype(A)}[]
        for row in eachrow(A)
            # if row is linearly independent with all existing ones, add it to the list
            if isempty(nullspace(reduce(hcat, indep_rows; init=collect(reshape(row, (n, 1)))); atol=atol))
                push!(indep_rows, row)
            end
        end
        return A * inv(reduce(hcat, indep_rows))'
    end
end