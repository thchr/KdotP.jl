using Test, Crystalline, KdotP

@testset "Finding a correct representative of antiunitary coreps" begin
for D in 1:3
    for sgnum in 1:MAX_SGNUM[D]
        lgirsd = lgirreps(sgnum, D)
        lgirsd = Dict(klab=>realify(lgirs) for (klab, lgirs) in lgirsd)
        for Œ±Œ≤Œ≥ in (nothing, Crystalline.TEST_Œ±Œ≤Œ≥s[D])
            showed_sg = false
            for (klab, lgirs) in lgirsd
                lg = group(first(lgirs))
                kv = position(lg)(Œ±Œ≤Œ≥)
                for lgir in lgirs
                    DT = KdotP.find_antiunitary_corep(lgir)
                    isnothing(DT) && continue # no antiunitary elements in gray little group

                    # verify that corep fulfils D(ùíØg‚ÇÄ)D*(ùíØg‚ÇÄ) = D(g‚ÇÄg‚ÇÄ)
                    g‚ÇÄ = KdotP.kv_to_negative_kv_operation(lgir)
                    g‚ÇÄg‚ÇÄ = compose(g‚ÇÄ, g‚ÇÄ, #=modœÑ=#false)
                    idx, Œîw = something(Crystalline.findequiv(g‚ÇÄg‚ÇÄ, lg, centering(lg))) # NB: g‚ÇÄg‚ÇÄ ‚àà `lg`
                    œï_g‚ÇÄg‚ÇÄ = cispi(2*dot(kv, Œîw))    # translation phase factor 
                    D_g‚ÇÄg‚ÇÄ = lgir(Œ±Œ≤Œ≥)[idx] * œï_g‚ÇÄg‚ÇÄ # D(g‚ÇÄg‚ÇÄ)

                    # test parts of corep algebra
                    @test DT*conj(DT) ‚âà D_g‚ÇÄg‚ÇÄ
                    # TODO: test more parts of the algebra
                end
            end
        end
    end
end
end # @testset